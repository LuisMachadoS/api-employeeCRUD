#######################################
# SPECIFICATION                       #
#######################################

openapi: 3.0.3
info:
  title: Employees Management
  version: '0.0.2'
  description: This API allows you to manage information of the employees of Axpe Consulting
  contact:
    name: Luis Machado
    email: LMachadoS@uxcale.com
tags:
  - name: Employees
    description: Operations related to employee management
servers:
  - url: 'http://127.0.0.1:4010'


#######################################
# PATHS                               #
#######################################

paths:
  '/employees':
    description: 'This endpoint allows you to get a list of the employees in the company, add or delete an Employee or do another action'
    
    get: #Seguridad desactivada de momento
      description: "Request for the list of employees in the company and returns it if everything goes well"
      summary: "Requests for the list of employees"
      operationId: get-employees
      tags:
        - Employees
      #security:
      #  - OAuth2:
      #    - read
      responses:
        '200': #Correct Request (returns employees list)
          $ref: '#/components/responses/200List'
        '204': #Correct Request (no info to return)
          $ref: '#/components/responses/204'
        '400': #Bad Request
          $ref: '#/components/responses/400'
        '401': #Unauthorized
          $ref: '#/components/responses/401'
        '403': #Forbidden
          $ref: '#/components/responses/403'
        '404': #Not Found
          $ref: '#/components/responses/404'
        '500': #Internal Server Error
          $ref: '#/components/responses/500'
        '503': #Service Unavailable
          $ref: '#/components/responses/503'
        'default':
          $ref: '#/components/responses/default'

    post: #Seguridad desactivada de momento
      description: "Create a new employee. Send the new employee's data in the request body"
      summary: "Creates a new employee"
      operationId: post-employees
      tags:
        - Employees
      #security:
      #  - OAuth2:
      #    - read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
            examples:
              newEmployee:
                $ref: '#/components/examples/example-employee-information'
      responses:
        '201': #Created (returns the new employee's information)
          $ref: '#/components/responses/201'
        '400': #Bad Request
          $ref: '#/components/responses/400'
        '401': #Unauthorized
          $ref: '#/components/responses/401'
        '403': #Forbidden
          $ref: '#/components/responses/403'
        '409': #Conflict
          $ref: '#/components/responses/409'
        '500': #Internal Server Error
          $ref: '#/components/responses/500'
        '503': #Service Unavailable
          $ref: '#/components/responses/503'
        'default':
          $ref: '#/components/responses/default'
      

  '/employees/{employeeId}':
    description: 'This endpoint allows you to get a list of the employees in the company, add or delete an Employee or do another action'
    parameters:
      - $ref: '#/components/parameters/employeeId'
    
    get: #Seguridad desactivada de momento
      description: "Request for the information of an employee by their ID and returns it"
      summary: "Request for the information of an employee by id"
      operationId: get-employee-employeeId
      tags:
        - Employees
      #security:
      #  - OAuth2:
      #    - read
      responses:
        '200': #Correct Request (returns employee's information)
          $ref: '#/components/responses/200Detail'
        '400': #Bad Request
          $ref: '#/components/responses/400'
        '401': #Unauthorized
          $ref: '#/components/responses/401'
        '403': #Forbidden
          $ref: '#/components/responses/403'
        '404': #Not Found
          $ref: '#/components/responses/404'
        '500': #Internal Server Error
          $ref: '#/components/responses/500'
        '503': #Service Unavailable
          $ref: '#/components/responses/503'
        'default':
          $ref: '#/components/responses/default'

    put: #Seguridad desactivada de momento
      description: "Completely update an employee. Send the new employee's details in the body of the request"
      summary: "Completely update an employee"
      operationId: put-employee-id
      tags:
        - Employees
      #security:
      #  - OAuth2:
      #    - read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200': #Updated succesfully (returns detail of employee's information)
          $ref: '#/components/responses/200Detail'
        '400': #Bad Request
          $ref: '#/components/responses/400'
        '401': #Unauthorized
          $ref: '#/components/responses/401'
        '403': #Forbidden
          $ref: '#/components/responses/403'
        '404': #Not found
          $ref: '#/components/responses/404'
        '409': #Conflict
          $ref: '#/components/responses/409'
        '500': #Internal Server Error
          $ref: '#/components/responses/500'
        '503': #Service Unavailable
          $ref: '#/components/responses/503'
        'default':
          $ref: '#/components/responses/default'

    patch: #Seguridad desactivada de momento
      description: "Partially update an employee. Send the new employee's details in the body of the request"
      summary: "Partially update an employee"
      operationId: patch-employee-id
      tags:
        - Employees
      #security:
      #  - OAuth2:
      #    - read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeePartial'
      responses:
        '200': #Updated succesfully (returns detail of employee's information)
          $ref: '#/components/responses/200Detail'
        '400': #Bad Request
          $ref: '#/components/responses/400'
        '401': #Unauthorized
          $ref: '#/components/responses/401'
        '403': #Forbidden
          $ref: '#/components/responses/403'
        '404': #Not found
          $ref: '#/components/responses/404'
        '409': #Conflict
          $ref: '#/components/responses/409'
        '500': #Internal Server Error
          $ref: '#/components/responses/500'
        '503': #Service Unavailable
          $ref: '#/components/responses/503'
        'default':
          $ref: '#/components/responses/default'

    delete: #Seguridad desactivada de momento
      description: "Create a new employee. Send the new employee's data in the request body"
      summary: "Creates a new employee"
      operationId: delete-employee-id
      tags:
        - Employees
      #security:
      #  - OAuth2:
      #    - read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '204': #No Content (employee deleted successfully)
          $ref: '#/components/responses/204'
        '400': #Bad Request
          $ref: '#/components/responses/400'
        '401': #Unauthorized
          $ref: '#/components/responses/401'
        '403': #Forbidden
          $ref: '#/components/responses/403'
        '404': #Not Found
          $ref: '#/components/responses/404'
        '409': #Conflict
          $ref: '#/components/responses/409'
        '500': #Internal Server Error
          $ref: '#/components/responses/500'
        '503': #Service Unavailable
          $ref: '#/components/responses/503'
        'default':
          $ref: '#/components/responses/default'


  '/employees/{employeeId}/email/validate':
    description: 'This endpoint allows you to get a list of the employees in the company, add or delete an Employee or do another action'
    parameters:
      - $ref: '#/components/parameters/employeeId'
    
    post: #Seguridad desactivada de momento
      description: "Validates de email of an employee. Sends the email of the employee which email is in the path and validates if exists or not"
      summary: "Validates de email of an employee"
      operationId: post-employee-validate-email
      tags:
        - Employees
      #security:
      #  - OAuth2:
      #    - read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 100
                  pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
                  description: Email of the employee.
                  example: alice.smith@axpe.com
              required:
                - email
              additionalProperties: false
      responses:
        '200': #Succesfull request (including the result of the validation)
          $ref: '#/components/responses/200Message'
        '400': #Bad Request
          $ref: '#/components/responses/400'
        '401': #Unauthorized
          $ref: '#/components/responses/401'
        '403': #Forbidden
          $ref: '#/components/responses/403'
        '409': #Conflict
          $ref: '#/components/responses/409'
        '500': #Internal Server Error
          $ref: '#/components/responses/500'
        '503': #Service Unavailable
          $ref: '#/components/responses/503'
        'default':
          $ref: '#/components/responses/default'



#######################################
# COMPONENTS                          #
#######################################

components:

  parameters:
  #### Parameters - Employee ID:
    employeeId:
      name: employeeId
      in: path
      required: true
      description: ID of an existing employee
      schema:
        type: integer
        format: int32
        maximum: 10000
        minimum: 1



  #### Security Schemes
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://localhost:3000/oauth/auth'
          tokenUrl: 'https://localhost:3000/oauth/token'
          scopes:
            read: Grants read access
            write: Grants write access
  

  schemas:
  #### Schemas - Employee object:
    Employee:
      title: Employee
      type: object
      description: Object that describes an Employee entity
      properties:
        id:
          type: integer
          format: int32
          maximum: 10000
          minimum: 1
          description: Unique identifier for the given employee.
        firstName:
          type: string
          maxLength: 50
          pattern: '^[A-Z][a-z]*( [A-Z][a-z]*)*$'
          description: First name of the employee.
        lastName:
          type: string
          maxLength: 50
          pattern: '^[A-Z][a-z]*( [A-Z][a-z]*)*$'
          description: First last name of the employee.
        lastName2:
          type: string
          maxLength: 50
          pattern: '^^[A-Z][a-z]*( [A-Z][a-z]*)*$'
          description: Second last name of the employee.
        identification:
          $ref: '#/components/schemas/Identification'
        email:
          type: string
          format: email
          maxLength: 100
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          description: Email of the employee.
          example: alice.smith@axpe.com
        incorporationDate:
          type: string
          maxLength: 10
          pattern: '^\d{2}/\d{2}/\d{4}$'
          description: The date that the employee was hired.
        phone:
          type: string
          maxLength: 20
          pattern: '^\+\d{2}\d{9}$'
          description: Phone number of the employee.
        userStatus:
          type: string
          enum:
            - pending
            - active
            - inactive
          description: 'Current status of the employee (e.g., pending, active, inactive).'
      required:
        - firstName
        - lastName
        - lastName2
        - email
        - identification
        - phone
      additionalProperties: false


#### Schemas - Employee (partial update version) object:
    EmployeePartial:
      title: Employee
      type: object
      description: Object that describes an Employee entity for the PATCH operations
      properties:
        id:
          type: integer
          format: int32
          maximum: 10000
          minimum: 1
          description: Unique identifier for the given employee.
        firstName:
          type: string
          maxLength: 50
          pattern: '^[A-Z][a-z]*( [A-Z][a-z]*)*$'
          description: First name of the employee.
        lastName:
          type: string
          maxLength: 50
          pattern: '^[A-Z][a-z]*( [A-Z][a-z]*)*$'
          description: First last name of the employee.
        lastName2:
          type: string
          maxLength: 50
          pattern: '^^[A-Z][a-z]*( [A-Z][a-z]*)*$'
          description: Second last name of the employee.
        identification:
          $ref: '#/components/schemas/Identification'
        email:
          type: string
          format: email
          maxLength: 100
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          description: Email of the employee.
          example: alice.smith@axpe.com
        incorporationDate:
          type: string
          maxLength: 10
          pattern: '^\d{2}/\d{2}/\d{4}$'
          description: The date that the employee was hired.
        phone:
          type: string
          maxLength: 20
          pattern: '^\+\d{2}\d{9}$'
          description: Phone number of the employee.
        userStatus:
          type: string
          enum:
            - pending
            - active
            - inactive
          description: 'Current status of the employee (e.g., pending, active, inactive).'
      additionalProperties: false


  #### Schemas - Employee (reduced) object:
    EmployeeEssentialData:
      title: EmployeeEssentialData
      type: object
      description: Object that describes a reduced version of an Employee entity
      properties:
        id:
          type: integer
          format: int32
          maximum: 10000
          minimum: 1
          description: Unique identifier for the given employee.
        firstName:
          type: string
          maxLength: 50
          pattern: '^[A-ZÁÉÍÓÚÑ][a-záéíóúñ]*( [A-ZÁÉÍÓÚÑ][a-záéíóúñ]*)*$'
          description: First name of the employee.
        lastName:
          type: string
          maxLength: 50
          pattern: '^[A-ZÁÉÍÓÚÑ][a-záéíóúñ]*( [A-ZÁÉÍÓÚÑ][a-záéíóúñ]*)*$'
          description: First last name of the employee.
        lastName2:
          type: string
          maxLength: 50
          pattern: '^[A-ZÁÉÍÓÚÑ][a-záéíóúñ]*( [A-ZÁÉÍÓÚÑ][a-záéíóúñ]*)*$'
          description: Second last name of the employee.
      required:
        - id
        - firstName
        - lastName
        - lastName2
      additionalProperties: false

    
  #### Schemas - Employee List:
    EmployeeList:
      type: object
      properties:
        totalItems:
          type: integer
          format: int32
          maximum: 1000
          minimum: 0
          description: total number of items available (without pagination)
        offset:
          type: integer
          format: int32
          maximum: 1000
          minimum: 0
          description: starting position of the current page
        limit:
          type: integer
          format: int32
          maximum: 1000
          minimum: 0
          description: maximun number of items per page
        items:
          type: array
          maxItems: 1000 ##42c
          items:
            $ref: '#/components/schemas/EmployeeEssentialData'
      additionalProperties: false


  #### Schemas - Identification object:
    Identification:
      title: Identification
      type: object
      description: Object that describes an Identification entity.
      properties:
        value:
          type: string
          pattern: '^\d{8}[A-Za-z]$'
          description: Identifier of the employee (8 numeric characters followed by 1 letter).
        type:
          type: string
          enum:
            - NIF
            - NIE
          description: Identification type (NIF or NIE).
      required:
        - value
        - type
      additionalProperties: false


  #### Schemas - Messages:
    Message:
      title: Message
      type: object
      description: Model of simple message response
      properties:
        messageTitle:
          type: string
          maxLength: 50
          pattern: ^.{1,50}$
          description: Title of the message
        messageDescription:
          type: string
          maxLength: 200
          pattern: ^.{1,200}$
          description: Additional information about the error
      required:
        - messageTitle
        - messageDescription
      additionalProperties: false


  #### Schemas - Error Messages:
    ErrorMessage:
      title: ErrorMessage
      type: object
      description: Model of error response
      properties:
        messageCode:
          type: string
          maxLength: 50
          pattern: ^.{1,50}$
          description: Code of the message
        messageTitle:
          type: string
          maxLength: 50
          pattern: ^.{1,50}$
          description: Title of the message
        messageDescription:
          type: string
          maxLength: 200
          pattern: ^.{1,200}$
          description: Additional information about the error
      required:
        - messageCode
        - messageTitle
        - messageDescription
      additionalProperties: false

  #### Responses: 200List, 200Detail, 204, 400, 401, 403, 404, 500, 503, Default
  responses:
    '200List':
      description: successful response, returns a list of employees
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmployeeList'
          examples:
            returnListOfEmployeesExample:
              $ref: '#/components/examples/example-employee-list'

    '200Detail':
      description: successful response, returns the information of the requested employee
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Employee'
          examples:
            returnEmployeeInformationExample:
              $ref: '#/components/examples/example-employee-information'

    '200Message':
      description: successful response, returns the result of the validation
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            returnListOfEmployeesExample:
              $ref: '#/components/examples/example-email-validation'

    '201':
      description: successful response, employee created, returns the information of the created employee
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
        location:
          $ref: '#/components/headers/locationHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Employee'
          examples:
            returnEmployeeInformationExample:
              $ref: '#/components/examples/example-employee-information'

    '204':
      description: successful response, no content returned
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'

    '400':
      description: Bad request. The request could not be processed due to invalid input
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            error400Example:
              $ref: '#/components/examples/example-error400'

    '401':
      description: Unauthorized. Authentication is required or has failed
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            error401Example:
              $ref: '#/components/examples/example-error401'

    '403':
      description: Forbidden. The client does not have access rights to the content.
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            error403Example:
              $ref: '#/components/examples/example-error403'

    '404':
      description: Not Found
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            error404Example:
              $ref: '#/components/examples/example-error404'

    '409':
      description: Conflict
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            error409Example:
              $ref: '#/components/examples/example-error409'

    '500':
      description: Internal server error. The server encountered an unexpected condition.
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            error500Example:
              $ref: '#/components/examples/example-error500'

    '503':
      description: Service unavailable. The server is temporarily unable to handle the request.
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            error503Example:
              $ref: '#/components/examples/example-error503'

    'default':
      description: Unexpected error
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            errorDefaultExample:
              $ref: '#/components/examples/example-errorDefault'

  #### Headers:
  headers:
    XRequestIdHeader:
      description: Unique Identifier for each request, following the UUID format (RFC-4122)
      schema:
        type: string
        format: uuid
        maxLength: 36
        pattern: '^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$'
      required: true
    locationHeader:
      description: URL of the new employee
      schema:
        type: string
        format: uri
        maxLength: 255
        pattern: '^https:\/\/[a-zA-Z0-9.-]+\/employees\/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$'
      required: true



  #### Examples:
  examples:
    
    #### Examples - Errors:
    example-error400:
      value:
        messageCode: '400'
        messageTitle: Bad Request
        messageDescription: The request could not be processed due to invalid input.
    example-error401:
      value:
        messageCode: '401'
        messageTitle: Unauthorized
        messageDescription: Authentication is required or has failed.
    example-error403:
      value:
        messageCode: '403'
        messageTitle: Forbidden
        messageDescription: You do not have permission to access this resource.
    example-error404:
      value:
        messageCode: '404'
        messageTitle: Not Found
        messageDescription: The requested resource could not be found.
    example-error409:
      value:
        messageCode: '409'
        messageTitle: Conflict
        messageDescription: There is already an employee with that email registered.
    example-error500:
      value:
        messageCode: '500'
        messageTitle: Internal Server Error
        messageDescription: An unexpected error occurred. Please try again later.
    example-error503:
      value:
        messageCode: '503'
        messageTitle: Service Unavailable
        messageDescription: The server is temporarily unable to handle the request.
    example-errorDefault:
      value:
        messageCode: 'default'
        messageTitle: Unexpected Error
        messageDescription: An unexpected error occurred. Please try again later or contact support if the problem persists.
    
    #### Examples - List of employees:
    example-employee-list:
      value:
        totalItems: 100
        offset: 0
        limit: 10
        items:
          - id: 34
            firstName: "Lucas"
            lastName: "Correa"
            lastName2: "De La Iglesia"
          - id: 35
            firstName: "Rebeca"
            lastName: "Garcia"
            lastName2: "Zamorano"
          - id: 36
            firstName: "Andrés"
            lastName: "Marcos"
            lastName2: "Bracamonte"
          - id: 37
            firstName: "Francisco"
            lastName: "Martín"
            lastName2: "Martín"
    
    #### Examples - Employee information:
    example-employee-information:
      value:
        id: 34
        firstName: "Lucas"
        lastName: "Correa"
        lastName2: "De La Iglesia"
        email: "lcorread@axpe.com"
        identification:
          type: NIF
          value: "12345678X"
        phone: "+34654321987"

    #### Examples - Email validation:
    example-email-validation:
      value:
        messageTitle: "Email OK"
        messageDescription: "Email validation has returned a successful result"